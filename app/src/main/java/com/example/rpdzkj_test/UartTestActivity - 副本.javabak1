package com.example.rpdzkj_test;
import java.util.concurrent.CountDownLatch;


import android.content.res.ColorStateList;
import android.graphics.Color;
import android.os.Bundle;
import java.lang.Thread;
import android.os.Handler;
import android.os.Looper;
import android.os.Message;

import android.util.DisplayMetrics;
import android.util.Log;
import android.widget.GridLayout;
import android.widget.TextView;
import android.widget.Button;

import java.util.Iterator;
import java.io.File;
import java.io.FilenameFilter;
import java.io.IOException;

import java.util.ArrayList;
import java.util.Arrays;
import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.InputStreamReader;
import java.io.InputStream;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import android.util.TypedValue;

import android.widget.CheckBox;
import android.widget.LinearLayout;
import android.widget.TextView;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import android.view.View;


import androidx.appcompat.app.AppCompatActivity;

public class UartTestActivity extends AppCompatActivity {

    ArrayList<File> uartsToTest = null;
//    LinearLayout checkboxLayout = null;
    Runnable runnable = null;
    Handler resultHandler = null;
    ArrayList<CheckBox> checkBoxArrayList = null;
    GridLayout checkboxLayout = null;
    TextView testResult;

    private ArrayList<File> getUsableUART() {
        File file = new File("/dev/");
        FilenameFilter filenameFilter = (file1, s) -> (s.contains("ttyS") || s.contains("ttyAS"));
        File[] files = file.listFiles(filenameFilter);

        if (files != null)
            return new ArrayList<>(Arrays.asList(files));

        return null;
    }

   /* public ArrayList<File> filterUart(ArrayList<File> list) {
        String vendorName = runCmd("getprop ro.hardware", 1).output;
        String deviceName = runCmd("getprop ro.product.device", 1).output;
        String modelName = runCmd("echo `cat /sys/firmware/devicetree/base/model`", 1).output;

        if(vendorName.equals("") || deviceName.equals("") || modelName.equals(""))
            return null;
        Log.d("BoardInfo", String.format("vendor [%s]\ndevice [%s]\nmodel  [%s]", vendorName, deviceName, modelName));

      //  String ignored = parseIgnoreValues(vendorName, deviceName, modelName);

        Iterator<File> iterator = list.iterator();
        while (iterator.hasNext()){
            File file = iterator.next();
            if(ignored.contains(file.getName()))
                iterator.remove();
        }

        return list;
    } */

    public boolean initTest() {
        uartsToTest = new ArrayList<>();
        for (int i = 0; i <= 20; i++) {
            uartsToTest.add(new File("/dev/ttyS" + i));
        }

        checkBoxArrayList = new ArrayList<>();

        runOnUiThread(new Runnable() {
            @Override
            public void run() {
                ((TextView)findViewById(R.id.uartNumText)).setText("串口数量为 " + uartsToTest.size());
                for (int i = 0; i < uartsToTest.size(); i ++) {
                    CheckBox checkBox = new CheckBox(UartTestActivity.this);
                    checkBox.setText(uartsToTest.get(i).getName());
                    checkBox.setTextSize(TypedValue.COMPLEX_UNIT_SP, 18);
                    GridLayout.LayoutParams params = new GridLayout.LayoutParams();
                    params.rowSpec = GridLayout.spec(i / 5);
                    params.columnSpec = GridLayout.spec(i % 5);
                    checkboxLayout.addView(checkBox, params);
                    checkBoxArrayList.add(checkBox);
                }
            }
        });

        return true;
    }



    public CmdResult runCmd(String cmd, int timeout) {
        java.lang.Process process = null;
        int exitVal = -1;
        DataOutputStream os = null;
        BufferedReader reader = null;
        StringBuilder output = new StringBuilder();

        try {
            process = Runtime.getRuntime().exec("sh");
            os = new DataOutputStream(process.getOutputStream());
            Log.d("RRRRR cmd ", cmd);
            os.writeBytes(cmd + "\n");
            os.flush();
            os.writeBytes("exit\n");
            os.flush();

            boolean processFinished = process.waitFor(timeout, TimeUnit.SECONDS);

            exitVal = process.exitValue();
            if (processFinished) {
                reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
                String line;
                while ((line = reader.readLine()) != null) {
                    output.append(line);
                }
            } else {
                process.destroyForcibly();
            }
        } catch (IOException | InterruptedException e) {
            e.printStackTrace();
        } finally {
            try {
                if (os != null) os.close();
                if (reader != null) reader.close();
            } catch (IOException e) {
                e.printStackTrace();
            }

            if (process != null) process.destroy();
        }

        return new CmdResult(exitVal, output.toString());
    }


    public void doTest() {
        ExecutorService executor = Executors.newFixedThreadPool(10);
        // ExecutorService executor = Executors.newCachedThreadPool();
        String str = "Uart Test String:0123456789abcdefghizklmn#!@#$%^";
        final String testString =  str + str;
        String uartSettings = "fffffff4:4:1cb2:a30:3:1c:7f:15:4:0:1:0:11:13:1a:0:12:f:17:16:0:0:0";
        for (int i = 0; i < checkBoxArrayList.size(); i ++) {
            CheckBox checkBox = checkBoxArrayList.get(i);
            if (checkBox.isChecked()) {
                File uart = uartsToTest.get(i);
                Log.d("RRRRR do uart", uart.getName());
                final int finalI = i;
                Future<?> future = executor.submit(() -> {
                    CmdResult result;
                    //String testFilePath = "/sdcard/" + uart.getName() + ".txt";
                    String testFilePath = "/data/" + uart.getName() + ".txt";
                    upgradeRootPermission(testFilePath);

                    String cmdTouch = String.format("touch %s \n", testFilePath);

                    String cmd0 = String.format("stty -F %s %s \n", uart.getAbsolutePath(), uartSettings);
                    String cmd1 = String.format("cat %s > %s & \n", uart.getAbsolutePath(), testFilePath);
                    String cmdW = String.format("echo \"%s\" > %s \n", testString, uart.getAbsolutePath());
                    String cmdR = String.format("cat %s \n", testFilePath);
                    String cmdRM = String.format("rm %s \n", testFilePath);
                    String cmdClean = "killall cat\n";

                    runCmd(cmdTouch, 1);

                    runCmd(cmd0, 1);
                    runCmd(cmd1, 1);
                    runCmd(cmdW, 1);
                   // result = runCmd(cmdR, 1);

                 //   CmdResult
                       result = runCmd(cmdR, 1);  // 执行命令并获取结果
                    runCmd(cmdRM, 1);

                    runCmd(cmdClean, 1);
                    Log.d("RRRRRR result ", uart.getName() + " "  + result.output);
                    Message msgToSend = Message.obtain();
                    msgToSend.obj = checkBoxArrayList.get(finalI);
                    msgToSend.arg1 = testString.equals(result.output) ? Color.GREEN : Color.RED;
                    resultHandler.sendMessage(msgToSend);
                });
            }
        }

        executor.shutdown();
    }

    public class CmdResult {
        CmdResult(int exitVal, String output) {
            this.exitVal = exitVal;
            this.output = output;
        }
        public int exitVal;
        public String output;
    }

    final int margin = 10;
    final int col = 4;
    int width = 0;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_uart_test);


        resultHandler = new Handler(Looper.getMainLooper()) {
            @Override
            public void handleMessage(Message msg) {
                CheckBox checkBox = (CheckBox) msg.obj;
                checkBox.setTextColor(msg.arg1);
                if (msg.arg1 == Color.RED) {
                   // testResult.append(uart.getName() + " 测试" + (testString.equals(result.output) ? "通过\n" : "未通过\n"));

                    testResult.setText(checkBox.getText() + " 测试未通过");
                }else {
                    testResult.setText(checkBox.getText() + " 测试通过");
                }

            }
        };


        checkboxLayout = findViewById(R.id.checkbox_layout);


        testResult = findViewById(R.id.test_result);
        DisplayMetrics displayMetrics = getResources().getDisplayMetrics();
        int screenWidth = displayMetrics.widthPixels;
        width = (screenWidth / col - 2 * margin);

        initTest();

        Button startButton = findViewById(R.id.start_button);
        startButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                doTest();
            }
        });
    }
    public static boolean upgradeRootPermission(String pkgCodePath) {
        Process process = null;
        DataOutputStream os = null;
        try {
            String cmd="chmod 777 " + pkgCodePath;
            process = Runtime.getRuntime().exec("su"); //切换到root帐号
            os = new DataOutputStream(process.getOutputStream());
            os.writeBytes(cmd + "\n");
            os.writeBytes("exit\n");
            os.flush();
            process.waitFor();
        } catch (Exception e) {
           // Log.e(TAG, "Error upgrading root permission", e);
            return false;
        } finally {
            try {
                if (os != null) {
                    os.close();
                }
                process.destroy();
            } catch (Exception e) {
            //    Log.e(TAG, "Error closing process", e);
            }
        }
        return true;
    }
}
