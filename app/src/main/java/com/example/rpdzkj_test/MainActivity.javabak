package com.example.rpdzkj_test;

import android.bluetooth.BluetoothAdapter;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.Manifest;
import android.net.wifi.WifiManager;
import android.os.Bundle;
import android.os.Handler;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import androidx.appcompat.app.AppCompatActivity;
import android.os.Bundle;

import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;
import android.provider.Settings;
import android.content.BroadcastReceiver;
import android.content.IntentFilter;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import android.util.Log;
import java.lang.reflect.Method;
import java.util.Timer;
import java.util.TimerTask;
import android.os.Environment;
import android.os.StatFs;
import android.text.format.Formatter;










public class MainActivity extends AppCompatActivity {

    private WifiManager wifiManager;
    private BluetoothAdapter bluetoothAdapter;
    private EditText editText;
    private Handler handler = new Handler();
    private static final String TAG = "MainActivity";

    private static final int PERMISSION_REQUEST_CODE = 100;
    private static final int DELAY_MS = 2000;  // 延迟2秒
    private Timer timer;
    private boolean wifiEnabled = false;

    private int wifiEnabledCount = 0;
    private int bluetoothEnabledCount = 0;
    private BroadcastReceiver wifiStateReceiver;
    private BroadcastReceiver bluetoothStateReceiver;
    private TextView wifiCountTextView;
    private TextView bluetoothCountTextView;
    private TextView sdCardStatusTextView;
    private TextView usedSpaceTextView;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        wifiManager = (WifiManager) getSystemService(Context.WIFI_SERVICE);
        bluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
        sdCardStatusTextView = findViewById(R.id.sd_card_status_text_view);
        usedSpaceTextView = findViewById(R.id.used_space_text_view);
        androidx.appcompat.app.ActionBar actionBar = getSupportActionBar();
        // 注册广播接收器
        IntentFilter filter = new IntentFilter();
        filter.addAction(Intent.ACTION_MEDIA_MOUNTED);
        filter.addAction(Intent.ACTION_MEDIA_UNMOUNTED);
        registerReceiver(sdCardStateReceiver, filter);

        File sdCardRoot = Environment.getExternalStorageDirectory();
        String sdCardPath = sdCardRoot.getAbsolutePath();
        Log.d(TAG, "SD 卡路径：" + sdCardPath);

        // 获取其他外部存储路径
        File[] externalFilesDirs = getExternalFilesDirs(null);
        for (File dir : externalFilesDirs) {
            if (dir != null) {
                String externalPath = dir.getAbsolutePath();
                Log.d(TAG, "其他外部存储路径：" + externalPath);
            }
        }

        // 检测一次 SD 卡状态
        checkSdCardState();

        if (actionBar != null) {
            // 设置logo
            actionBar.setLogo(R.drawable.rp_test); // 替换成你的logo资源
            actionBar.setDisplayUseLogoEnabled(true);
            actionBar.setDisplayShowHomeEnabled(true);
        }

        // 检查蓝牙权限
        if (ContextCompat.checkSelfPermission(this, android.Manifest.permission.BLUETOOTH_ADMIN)
                != android.content.pm.PackageManager.PERMISSION_GRANTED) {
            ActivityCompat.requestPermissions(this,
                    new String[]{android.Manifest.permission.BLUETOOTH_ADMIN},
                    PERMISSION_REQUEST_CODE);
        }


        Button wifiButton = findViewById(R.id.wifi_button);
        wifiButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                wifiEnabledCount = 0;
                wifiCountTextView.setText("WiFi打开成功的次数: " + wifiEnabledCount);
                wifiButton.setEnabled(false);
                wifiEnabled = !wifiEnabled;
                setProperty("wifi_test", wifiEnabled ? "1" : "0");
            }
        });


        Button bluetoothButton = findViewById(R.id.bluetooth_button);
        bluetoothButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                bluetoothEnabledCount = 0;
                bluetoothCountTextView.setText("蓝牙打开成功的次数: " + bluetoothEnabledCount);
                bluetoothButton.setEnabled(false);
                if (bluetoothAdapter != null) {
                    timer = new Timer();
                    timer.schedule(new TimerTask() {
                        @Override
                        public void run() {
                            if (bluetoothAdapter.isEnabled()) {
                                // 关闭蓝牙
                                bluetoothAdapter.disable();
                            } else {
                                // 开启蓝牙
                                bluetoothAdapter.enable();
                            }
                        }
                    }, 0, DELAY_MS);
                }
            }
        });

        // 检测 SD 卡状态
        Button sdcardButton = findViewById(R.id.sd_card_test_button);
        sdcardButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                sdcardButton.setEnabled(false);
                String sdCardState = Environment.getExternalStorageState();
                if (Environment.MEDIA_MOUNTED.equals(sdCardState)) {
                    // SD 卡已挂载
                    sdCardStatusTextView.setText("SD 卡已挂载");
                    // 获取 SD 卡根目录
                    File sdCardRoot = Environment.getExternalStorageDirectory();
                    // 获取已使用的容量
                    long usedSpace = getUsedSpace(sdCardRoot);
                    usedSpaceTextView.setText("已使用空间：" + formatFileSize(usedSpace));
                    setProperty("sdcard_test", "1");
                } else {
                    // SD 卡未挂载或已被拔出
                    sdCardStatusTextView.setText("SD 卡未挂载或已被拔出");
                    usedSpaceTextView.setText("");
                }
            }
        });

        wifiCountTextView = findViewById(R.id.wifi_count_text_view);
        bluetoothCountTextView = findViewById(R.id.bluetooth_count_text_view);

        wifiStateReceiver = new BroadcastReceiver() {
            @Override
            public void onReceive(Context context, Intent intent) {
                int wifiStateExtra = intent.getIntExtra(WifiManager.EXTRA_WIFI_STATE, WifiManager.WIFI_STATE_UNKNOWN);

                switch (wifiStateExtra) {
                    case WifiManager.WIFI_STATE_ENABLED:
                        wifiEnabledCount++;
                        wifiCountTextView.setText("WiFi打开成功的次数: " + wifiEnabledCount);
                        break;
                    case WifiManager.WIFI_STATE_DISABLED:
                        // WiFi已关闭
                        break;
                }
            }
        };

        registerReceiver(wifiStateReceiver, new IntentFilter(WifiManager.WIFI_STATE_CHANGED_ACTION));

        bluetoothStateReceiver = new BroadcastReceiver() {
            @Override
            public void onReceive(Context context, Intent intent) {
                final String action = intent.getAction();

                if (action.equals(BluetoothAdapter.ACTION_STATE_CHANGED)) {
                    final int state = intent.getIntExtra(BluetoothAdapter.EXTRA_STATE, BluetoothAdapter.ERROR);
                    switch (state) {
                        case BluetoothAdapter.STATE_ON:
                            bluetoothEnabledCount++;
                            bluetoothCountTextView.setText("蓝牙打开成功的次数: " + bluetoothEnabledCount);
                            break;
                        case BluetoothAdapter.STATE_OFF:
                            // 蓝牙已关闭
                            break;
                    }
                }
            }
        };

        registerReceiver(bluetoothStateReceiver, new IntentFilter(BluetoothAdapter.ACTION_STATE_CHANGED));




        Button stopButton = findViewById(R.id.stop_button);
        stopButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                wifiButton.setEnabled(true);
                bluetoothButton.setEnabled(true);
                sdcardButton.setEnabled(true);
                if (timer != null) {
                    timer.cancel();
                    timer = null;
                }
                wifiEnabled = false;
                setProperty("wifi_test", "0");
                setProperty("sdcard_test", "0");
            }
        });



    }
    @Override
    protected void onDestroy() {
        super.onDestroy();
        unregisterReceiver(wifiStateReceiver);
        unregisterReceiver(bluetoothStateReceiver);
        unregisterReceiver(sdCardStateReceiver);
    }

    public static boolean upgradeRootPermission(String pkgCodePath) {
        Process process = null;
        DataOutputStream os = null;
        try {
            String cmd="chmod 777 " + pkgCodePath;
            process = Runtime.getRuntime().exec("su"); //切换到root帐号
            os = new DataOutputStream(process.getOutputStream());
            os.writeBytes(cmd + "\n");
            os.writeBytes("exit\n");
            os.flush();
            process.waitFor();
        } catch (Exception e) {
            return false;
        } finally {
            try {
                if (os != null) {
                    os.close();
                }
                process.destroy();
            } catch (Exception e) {
            }
        }
        return true;
    }
    public static String getProperty(String key, String defaultValue) {
        String value = defaultValue;
        try {
            Class<?> c = Class.forName("android.os.SystemProperties");
            Method get = c.getMethod("get", String.class, String.class);
            value = (String) (get.invoke(c, key, "unknown"));
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            return value;
        }
    }

    public static int setProperty(String key, String value) {
        try {
            Class<?> c = Class.forName("android.os.SystemProperties");
            Method set = c.getMethod("set", String.class, String.class);
            set.invoke(c, key, value);
            return 0;
        } catch (Exception e) {
            e.printStackTrace();
            return -1;
        }
    }

    public static String execShellCmd(String command) {
        StringBuilder output = new StringBuilder();
        Process process;
        try {
            process = Runtime.getRuntime().exec(command);
            BufferedReader reader = new BufferedReader(
                    new InputStreamReader(process.getInputStream()));
            String line;
            while ((line = reader.readLine()) != null) {
                output.append(line + "\n");
            }
            reader.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return output.toString();
    }

    private long getUsedSpace(File directory) {
        StatFs statFs = new StatFs(directory.getPath());
        long blockSize = statFs.getBlockSizeLong();
        long totalBlocks = statFs.getBlockCountLong();
        long availableBlocks = statFs.getAvailableBlocksLong();
        return (totalBlocks - availableBlocks) * blockSize;
    }

    private String formatFileSize(long size) {
        return Formatter.formatFileSize(this, size);
    }

    private BroadcastReceiver sdCardStateReceiver = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
            String action = intent.getAction();
            if (action != null && action.equals(Intent.ACTION_MEDIA_MOUNTED)) {
                // SD 卡已挂载
                sdCardStatusTextView.setText("SD 卡已挂载");
                // 获取 SD 卡根目录
                File sdCardRoot = Environment.getExternalStorageDirectory();
                // 获取已使用的容量
                long usedSpace = getUsedSpace(sdCardRoot);
                usedSpaceTextView.setText("已使用空间：" + formatFileSize(usedSpace));
                setProperty("sdcard_test", "1");
            } else {
                // SD 卡未挂载或已被拔出
                sdCardStatusTextView.setText("SD 卡未挂载或已被拔出");
                usedSpaceTextView.setText("");
            }
        }
    };

    private void checkSdCardState() {
        String sdCardState = Environment.getExternalStorageState();
        if (Environment.MEDIA_MOUNTED.equals(sdCardState)) {
            // SD 卡已挂载
            sdCardStatusTextView.setText("SD 卡已挂载");
            // 获取 SD 卡根目录
            File sdCardRoot = Environment.getExternalStorageDirectory();
            // 获取已使用的容量
            long usedSpace = getUsedSpace(sdCardRoot);
            usedSpaceTextView.setText("已使用空间：" + formatFileSize(usedSpace));

        } else {
            // SD 卡未挂载或已被拔出
            sdCardStatusTextView.setText("SD 卡未挂载或已被拔出");
            usedSpaceTextView.setText("");
        }
    }

}
