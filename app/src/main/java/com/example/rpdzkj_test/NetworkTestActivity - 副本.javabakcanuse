package com.example.rpdzkj_test;


import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;

import android.widget.TextView;

import androidx.appcompat.app.AppCompatActivity;

import android.content.IntentFilter;
import java.io.BufferedReader;
import java.io.InputStreamReader;

import java.util.List;

import java.net.InetAddress;
import java.net.NetworkInterface;
import java.util.Collections;

import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import java.net.SocketException;



import java.util.concurrent.atomic.AtomicBoolean;

public class NetworkTestActivity extends AppCompatActivity {

    private TextView networkStatusTextView, networkStatusTextView1, networkStatusTextView2;

    private Runnable runnable, runnable1, runnable2;
    private Handler handler = new Handler(), handler1 = new Handler(), handler2 = new Handler();

    private MyNetworkChangeReceiver networkChangeReceiver, networkChangeReceiver1, networkChangeReceiver2;
    private static long startTime = System.currentTimeMillis();
    private static long startTime1 = System.currentTimeMillis();
    private static long startTime2 = System.currentTimeMillis();
    private static long lastSeenTime = 0;
    private static String lastSeenIP = null;
    private static String lastPingResult = null;
    private NetworkTest networkTest, networkTest1, networkTest2;
    private static AtomicBoolean shouldStop = new AtomicBoolean(false);

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_network_test);
        TextView networkStatusTextView = findViewById(R.id.ethnetwork_status_text_view);
        TextView networkStatusTextView1 = findViewById(R.id.ethnetwork1_status_text_view);
        TextView networkStatusTextView2 = findViewById(R.id.ethnetwork2_status_text_view);

        // 为每个网络接口创建NetworkTest对象
        networkTest = new NetworkTest("eth0", handler, networkStatusTextView);
        networkTest1 = new NetworkTest("eth1", handler1, networkStatusTextView1);
        networkTest2 = new NetworkTest("eth2", handler2, networkStatusTextView2);

        // 开始测试
        networkTest.start();
        networkTest1.start();
        networkTest2.start();
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();

        // 取消注册广播接收器
        unregisterReceiver(networkChangeReceiver);
        unregisterReceiver(networkChangeReceiver1);
        unregisterReceiver(networkChangeReceiver2);
    }


   /* public class NetworkTest {
        private String interfaceName;
        private Handler handler;
        private TextView networkStatusTextView;
        private long startTime;
        private long lastSeenTime;

        public NetworkTest(String interfaceName, Handler handler, TextView networkStatusTextView) {
            this.interfaceName = interfaceName;
            this.handler = handler;
            this.networkStatusTextView = networkStatusTextView;
            this.startTime = System.currentTimeMillis();
        }

        public void start() {
            Runnable runnable = new Runnable() {
                @Override
                public void run() {
                    new Thread(new Runnable() {
                        @Override
                        public void run() {
                            final String ip = NetworkUtils.getNetWorkIp(interfaceName);
                            final boolean isConnected = NetworkUtils.isInterfaceConnected(interfaceName, NetworkTestActivity.this);
                            final String pingResult = isConnected ? NetworkUtils.ping("www.qq.com") : "测试失败";

                            runOnUiThread(new Runnable() {
                                @Override
                                public void run() {
                                    long currentTime = System.currentTimeMillis();
                                    if (isConnected) {
                                        lastSeenTime = currentTime;
                                        networkStatusTextView.setText("IP: " + ip + "\nPing result: " + pingResult + "\nIP存在时间: " + (currentTime - startTime) / 1000.0 + " s");
                                    } else {
                                        networkStatusTextView.setText("测试失败" + "\n最后记录的IP存在时间: " + (lastSeenTime - startTime) / 1000.0 + " s");
                                    }
                                }
                            });
                        }
                    }).start();

                    handler.postDelayed(this, 700);
                }
            };

            handler.post(runnable);
        }
    }

    */

    public class NetworkTest {
        private String interfaceName;
        private Handler handler;
        private TextView networkStatusTextView;
        private long startTime;
        private long lastSeenTime;

        public NetworkTest(String interfaceName, Handler handler, TextView networkStatusTextView) {
            this.interfaceName = interfaceName;
            this.handler = handler;
            this.networkStatusTextView = networkStatusTextView;
            this.startTime = System.currentTimeMillis();
        }

        public void start() {
            Runnable runnable = new Runnable() {
                @Override
                public void run() {
                    new Thread(new Runnable() {
                        @Override
                        public void run() {
                            final String ip = NetworkUtils.getNetWorkIp(interfaceName);
                            final boolean isConnected = NetworkUtils.isInterfaceConnected(interfaceName, NetworkTestActivity.this);
                           // final String pingResult = isConnected ? NetworkUtils.ping("www.qq.com") : "测试失败";
                            final String pingResult = NetworkUtils.ping("www.qq.com");
                            runOnUiThread(new Runnable() {
                                @Override
                                public void run() {
                                    long currentTime = System.currentTimeMillis();
                                    double elapsedTime = (currentTime - startTime) / 1000.0;
                                    if (elapsedTime < 0) {
                                        networkStatusTextView.setText("网络未接入");
                                    } else {
                                        if (isConnected) {
                                            lastSeenTime = currentTime;
                                            networkStatusTextView.setText("IP: " + ip + "\nPing result: " + pingResult + "\nIP存在时间: " + elapsedTime + " s");
                                        } else {
                                            double lastSeenDuration = (lastSeenTime - startTime) / 1000.0;
                                            networkStatusTextView.setText("测试失败" + "\n最后记录的IP存在时间: " + lastSeenDuration + " s");
                                        }
                                    }
                                }
                            });
                        }
                    }).start();

                    handler.postDelayed(this, 700);
                }
            };

            handler.post(runnable);
        }
    }

    public static class NetworkUtils {
        public static String getNetWorkIp(String interfaceName) {
            try {
                List<NetworkInterface> interfaces = Collections.list(NetworkInterface.getNetworkInterfaces());
                for (NetworkInterface intf : interfaces) {
                    if (!intf.getName().equalsIgnoreCase(interfaceName))
                        continue;

                    List<InetAddress> addrs = Collections.list(intf.getInetAddresses());
                    for (InetAddress addr : addrs) {
                        if (!addr.isLoopbackAddress()) {
                            String sAddr = addr.getHostAddress();

                            // Check if IPv4 address
                            boolean isIPv4 = sAddr.indexOf(':') < 0;

                            if (isIPv4) {
                                return sAddr;
                            }
                        }
                    }
                }
            } catch (Exception ignored) { } // for now eat exceptions
            return null;
        }

        public static String ping(String url) {
            String pingResult = "";

            try {
                Process process = Runtime.getRuntime().exec("/system/bin/ping -c 1 " + url);
                BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));

                String line;
                while ((line = reader.readLine()) != null) {
                    pingResult += line + "\n";
                }

                reader.close();
            } catch (Exception e) {
                e.printStackTrace();
                pingResult = "Ping failed";
            }

            return "Ping output:\n" + pingResult ;
        }

        public static boolean isInterfaceConnected(String interfaceName, Context context) {
            try {
                NetworkInterface networkInterface = NetworkInterface.getByName(interfaceName);
                return networkInterface != null && networkInterface.isUp();
            } catch (SocketException e) {
                e.printStackTrace();
                return false;
            }
        }

    }

    public static class MyNetworkChangeReceiver extends BroadcastReceiver {
        private Handler handler;
        private Runnable runnable;
        private TextView networkStatusTextView;

        public MyNetworkChangeReceiver(Handler handler, Runnable runnable, TextView networkStatusTextView) {
            this.handler = handler;
            this.runnable = runnable;
            this.networkStatusTextView = networkStatusTextView;
        }

        @Override
        public void onReceive(Context context, Intent intent) {
            if (ConnectivityManager.CONNECTIVITY_ACTION.equals(intent.getAction())) {
                boolean noConnectivity = intent.getBooleanExtra(
                        ConnectivityManager.EXTRA_NO_CONNECTIVITY, false
                );

                if (noConnectivity) {
                    MainActivity.isRunning = false;
                    handler.removeCallbacks(runnable);  // 停止Runnable
                    shouldStop.set(true);  // 停止新线程
                    // 更新UI
                    double lastSeenDuration = (lastSeenTime - startTime) / 1000.0;
                    networkStatusTextView.setText("测试失败" + "\n最后记录的IP存在时间: " + lastSeenDuration + " s");
                } else {
                    MainActivity.isRunning = true;
                    shouldStop.set(false);  // 允许新线程
                    startTime = System.currentTimeMillis();  // 重新开始计时
                    handler.post(runnable);  // 重新开始Runnable
                }
            }
        }
    }

   /* public static class MyNetworkChangeReceiver extends BroadcastReceiver {
        private Handler handler;
        private Runnable runnable;
        private TextView networkStatusTextView;

        public MyNetworkChangeReceiver(Handler handler, Runnable runnable, TextView networkStatusTextView) {
            this.handler = handler;
            this.runnable = runnable;
            this.networkStatusTextView = networkStatusTextView;
        }

        @Override
        public void onReceive(Context context, Intent intent) {
            if (ConnectivityManager.CONNECTIVITY_ACTION.equals(intent.getAction())) {
                boolean noConnectivity = intent.getBooleanExtra(
                        ConnectivityManager.EXTRA_NO_CONNECTIVITY, false
                );

                if (noConnectivity) {
                    handler.removeCallbacks(runnable);
                } else {
                    handler.post(runnable);
                }
            }
        }
    }

    */
}


